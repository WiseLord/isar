#!/bin/bash
# Copyright (c) Mentor Graphics, a Siemens business, 2019
# SPDX-License-Identifier: MIT

# Load common stuff
. ${S}/debian/isar/common

do_build() {

    # Print a few things that are of particular interest
    print_settings

    # Trace what we do here
    set -x

    # Process existing kernel configuration to make sure it is complete
    # (use defaults for options that were not specified)
    ${MAKE} O=${KERNEL_BUILD_DIR} olddefconfig prepare

    # Transfer effective kernel version into control file and scripts
    KR=$(${MAKE} O=${KERNEL_BUILD_DIR} -s --no-print-directory kernelrelease)
    sed -i "s/@KR@/${KR}/g" ${S}/debian/control ${S}/debian/linux-image-${KERNEL_NAME_PROVIDED}.*

    if echo "${DEB_BUILD_PROFILES}" | grep -q "kernel"; then # Build kernel scripts and tools
        ${MAKE} O=${KERNEL_BUILD_DIR} ${PARALLEL_MAKE} KCFLAGS="${KCFLAGS}" KAFLAGS="${KAFLAGS}"
    elif echo "${DEB_BUILD_PROFILES}" | grep -q "kbuild"; then # Build kernel scripts and tools
        ${MAKE} O=${KERNEL_BUILD_DIR} ${PARALLEL_MAKE} KCFLAGS="${KCFLAGS}" KAFLAGS="${KAFLAGS}" scripts
        if grep -q -E "CONFIG_STACK_VALIDATION=y|CONFIG_HAVE_OBJTOOL=y" ${KERNEL_BUILD_DIR}/.config && [ -d "tools/objtool" ]; then
            ${MAKE} O=${KERNEL_BUILD_DIR} ${PARALLEL_MAKE} KCFLAGS="${KCFLAGS}" KAFLAGS="${KAFLAGS}" tools/objtool || true
        fi
        if grep -q "CONFIG_MODULES=y" ${KERNEL_BUILD_DIR}/.config; then
            ${MAKE} O=${KERNEL_BUILD_DIR} ${PARALLEL_MAKE} KCFLAGS="${KCFLAGS}" KAFLAGS="${KAFLAGS}" modules_prepare
        fi
    fi

    # Stop tracing
    set +x
}

print_settings() {
    cat <<EOF
# Build settings:
# ---------------
# ARCH=${ARCH}
# CROSS_COMPILE=${CROSS_COMPILE}
# KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP}
EOF
}

main build ${*}
